/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moviemanager;

import java.awt.Dimension;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import moviemanager.dal.RepositoryFactory;
import moviemanager.dal.UserRepository;
import moviemanager.model.User;
import moviemanager.utils.MessageUtils;

/**
 *
 * @author fran
 */
public class MovieManager extends javax.swing.JFrame {

    private static final String DATA = "Data";
    private static final String USERS = "Users";
    private static final String MOVIES = "Movies";
    private static final String DIRECTORS = "Directors";
    private static final String ACTORS = "Actors";

    private Map<String, String> user;

    private UserRepository repository;

    /**
     * Creates new form MM
     */
    public MovieManager() {
        initComponents();
        init();
        handleLookAndFeel();
        centerFrame();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */ 
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnAccount = new javax.swing.JMenu();
        miLogout = new javax.swing.JMenuItem();
        mnView = new javax.swing.JMenu();
        mnLF = new javax.swing.JMenu();
        mnNavigation = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Movie Manager");

        tpContent.setMinimumSize(new java.awt.Dimension(1153, 756));
        tpContent.setName(""); // NOI18N
        tpContent.setPreferredSize(new java.awt.Dimension(1257, 778));

        mnAccount.setMnemonic('a');
        mnAccount.setText("Account");

        miLogout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miLogout.setText("Log out");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        mnAccount.add(miLogout);

        jMenuBar1.add(mnAccount);

        mnView.setMnemonic('v');
        mnView.setText("View");

        mnLF.setMnemonic('L');
        mnLF.setText("Look and feel");
        mnView.add(mnLF);

        jMenuBar1.add(mnView);

        mnNavigation.setMnemonic('N');
        mnNavigation.setText("Navigation");
        jMenuBar1.add(mnNavigation);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1645, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 931, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        tpContent.removeAll();
        mnNavigation.removeAll();
        init();
    }//GEN-LAST:event_miLogoutActionPerformed

    /**
     * @param args the command line darguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieManager().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JMenu mnAccount;
    private javax.swing.JMenu mnLF;
    private javax.swing.JMenu mnNavigation;
    private javax.swing.JMenu mnView;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            repository = RepositoryFactory.GetUserRepository();
        } catch (Exception ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
        user = new HashMap<>();
        try {            
            boolean configurated;
            do {
                configurated = configuratePanels();
            } while (!configurated);
        } catch (Exception ex) {
            miLogout.setText("Log in");
        } 
    }

    private boolean configuratePanels() throws Exception {
        List<User> users = repository.SelectUsers();
        user = MessageUtils.showLoginDialog(this);
        for (User loadedUser : users) {
            if (loadedUser.getUsername().equals(user.get("username")) && loadedUser.getPassword().equals(user.get("password"))) {
                if (loadedUser.isActive()) {
                    switch (loadedUser.getRole()) {
                        case ADMIN:
                            tpContent.add(DATA, new Data()).setVisible(false);
                            tpContent.add(USERS, new Users()).setVisible(false);
                            addNavigation(DATA);
                            addNavigation(USERS);
                            break;
                        case USER:
                            tpContent.add(MOVIES, new Movies()).setVisible(false);
                            tpContent.add(DIRECTORS, new Directors()).setVisible(false);
                            tpContent.add(ACTORS, new Actors()).setVisible(false);
                            addNavigation(MOVIES);
                            addNavigation(DIRECTORS);
                            addNavigation(ACTORS);
                            break;
                    }
                    miLogout.setText("Log out");
                    return true;
                } else  {
                    MessageUtils.showInformationMessage("Login error", "You've been banned, contact the administrator!");
                    return false;
                }
            }
        }
        MessageUtils.showInformationMessage("Login error", "Invalid username or password, try again!");
        return false;
    }

    private void handleLookAndFeel() {
        ButtonGroup bgLookFeel = new ButtonGroup();
        Arrays.asList(UIManager.getInstalledLookAndFeels()).forEach(lf -> {
            JRadioButtonMenuItem mi = new JRadioButtonMenuItem(lf.getName());
            bgLookFeel.add(mi);
            mnLF.add(mi);
            if ("Nimbus".equals(lf.getName())) {
                mi.setSelected(true);
            }
            mi.addActionListener(e -> {
                try {
                    UIManager.setLookAndFeel(lf.getClassName());
                    SwingUtilities.updateComponentTreeUI(MovieManager.this);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        });
    }
    
    private void centerFrame() {
        Dimension windowSize = getSize();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Point centerPoint = ge.getCenterPoint();

        int dx = centerPoint.x - windowSize.width / 2;
        int dy = centerPoint.y - windowSize.height / 2;
        setLocation(dx, dy);
    }

    private void addNavigation(String DATA) {
        JMenuItem item = createMenuItem(
                null,
                DATA,
                KeyStroke.getKeyStroke(DATA.charAt(0), Toolkit.getDefaultToolkit ().getMenuShortcutKeyMask())
        );
        item.addActionListener(e -> {
            tpContent.setSelectedIndex(findTabByName(DATA, tpContent));
        });
        mnNavigation.add(item);
    }
    
    private JMenuItem createMenuItem(Action action, String text, KeyStroke accelerator) {
        JMenuItem menuItem = new JMenuItem();
        menuItem.setAction(action);
        menuItem.setText(text);
        menuItem.setAccelerator(accelerator);
        return menuItem;
    }
    
    public int findTabByName(String title, JTabbedPane tab) {
      int tabCount = tab.getTabCount();
      for (int i=0; i < tabCount; i++) 
      {
        String tabTitle = tab.getTitleAt(i);
        if (tabTitle.equals(title)) return i;
      }
      return -1;
    }

}
