/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moviemanager;

import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;
import moviemanager.dal.ActorRepository;
import moviemanager.dal.MovieRepository;
import moviemanager.dal.RepositoryFactory;
import moviemanager.model.Actor;
import moviemanager.model.Movie;
import moviemanager.model.MovieTransferable;
import moviemanager.model.PersonTableModel;
import moviemanager.utils.IconUtils;
import moviemanager.utils.MessageUtils;

/**
 *
 * @author fran
 */
public class Actors extends javax.swing.JPanel {

    
    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private MovieRepository repository;
    private ActorRepository actorRepository;

    private PersonTableModel actorsTableModel;

    private final Set<Movie> moviesSet;
    
    private DefaultListModel<Movie> moviesModel;
    private DefaultListModel<Movie> allMoviesModel;


    private Actor selectedActor;
    
    /**
     * Creates new form Actors
     */
    public Actors() {
        moviesSet = new TreeSet<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllMovies = new javax.swing.JList<>();
        btnDelete = new javax.swing.JButton();
        lbFirstNameError = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lbLastNameError = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbIcon = new javax.swing.JLabel();
        tfFirstName = new javax.swing.JTextField();
        btnRemoveMovie = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tfLastName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbActors = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1257, 778));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lsMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsMoviesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lsMovies);

        btnCreate.setText("Create actor");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update actor");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lsAllMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsAllMoviesMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(lsAllMovies);

        btnDelete.setText("Delete actor");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbFirstNameError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel11.setText("All Movies");

        lbLastNameError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLabel1.setText("Actors");

        jLabel2.setText("First name");

        lbIcon.setBackground(new java.awt.Color(51, 255, 51));

        btnRemoveMovie.setText("Remove Movie");
        btnRemoveMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMovieActionPerformed(evt);
            }
        });

        jLabel5.setText("Last name");

        jLabel10.setText("Filmography");

        tbActors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbActorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbActors);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(33, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(tfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lbFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel10)
                            .addComponent(btnRemoveMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addComponent(lbFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void lsMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsMoviesMouseClicked
        if (lsMovies.getModel().getSize() != 0) {
            btnRemoveMovie.setEnabled(true);
            setIcon(lbIcon, new File(lsMovies.getSelectedValue().getImagePath()));
        }
    }//GEN-LAST:event_lsMoviesMouseClicked

    private void lsAllMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllMoviesMouseClicked
        setIcon(lbIcon, new File(lsAllMovies.getSelectedValue().getImagePath()));
    }//GEN-LAST:event_lsAllMoviesMouseClicked

    private void btnRemoveMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMovieActionPerformed
        moviesSet.remove(lsMovies.getSelectedValue());
        moviesModel.remove(lsMovies.getSelectedIndex());
        lbIcon.setIcon(null);
        btnRemoveMovie.setEnabled(false);
    }//GEN-LAST:event_btnRemoveMovieActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        if (formValid()) {
            try {
                Actor actor = new Actor(
                        tfFirstName.getText().trim(),
                        tfLastName.getText().trim()                        
                );
                int actorId = actorRepository.CreateActor(actor);
                
                moviesSet.forEach(movie -> {
                    try {
                        repository.InsertActorInMovie(movie.getId(), actorId);
                    } catch (Exception ex) {
                        Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                        MessageUtils.showErrorMessage("Error", "Unable to insert actor in movie!");

                    }
                });
      
                actorsTableModel.setPersons(new ArrayList<>(actorRepository.SelectActors()));

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create actor!");
            }
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose actor to update");
            return;
        }
        if (formValid()) {
            try {

                selectedActor.setFirstName(tfFirstName.getText().trim());
                selectedActor.setLastName(tfLastName.getText().trim());
                
                actorRepository.DeleteActedMovies(selectedActor.getId());
                moviesSet.forEach(movie -> {
                    try {
                        repository.InsertActorInMovie(movie.getId(), selectedActor.getId());
                    } catch (Exception ex) {
                        Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });

                actorRepository.UpdateActor(selectedActor.getId(), selectedActor);
                actorsTableModel.setPersons(new ArrayList<>(actorRepository.SelectActors()));

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update actor!");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose actor to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete actor",
                "Do you really want to delete actor?") == JOptionPane.YES_OPTION) {
            try {
                actorRepository.DeleteActedMovies(selectedActor.getId());
                actorRepository.DeleteActor(selectedActor.getId());
                actorsTableModel.setPersons(new ArrayList<>(actorRepository.SelectActors()));

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete actor!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tbActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbActorsMouseClicked
        showActor();
    }//GEN-LAST:event_tbActorsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRemoveMovie;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lbFirstNameError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbLastNameError;
    private javax.swing.JList<Movie> lsAllMovies;
    private javax.swing.JList<Movie> lsMovies;
    private javax.swing.JTable tbActors;
    private javax.swing.JTextField tfFirstName;
    private javax.swing.JTextField tfLastName;
    // End of variables declaration//GEN-END:variables



    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            initDragNDrop();
            
            allMoviesModel = new DefaultListModel();
            moviesModel = new DefaultListModel();

            loadMoviesModel();
            
            lsMovies.setModel(moviesModel);

            btnRemoveMovie.setEnabled(false);
            
            clearForm();


        } catch (Exception ex) {
            Logger.getLogger(Directors.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);

        }
    }
    
    private void initValidation() {
        validationFields = Arrays.asList(tfFirstName, tfLastName);
        errorLabels = Arrays.asList(lbFirstNameError, lbLastNameError);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.GetMovieRepository();
        actorRepository = RepositoryFactory.GetActorRepository();

    }

    private void initTable() throws Exception {
        tbActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbActors.setAutoCreateRowSorter(true);
        tbActors.setRowHeight(25);
        actorsTableModel = new PersonTableModel(new ArrayList<>(actorRepository.SelectActors()));
        tbActors.setModel(actorsTableModel);

    }

    private void initDragNDrop() {
        lsAllMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllMovies.setDragEnabled(true);
        lsAllMovies.setTransferHandler(new Actors.ExportMovieTransferHandler());
      
        lsMovies.setDropMode(DropMode.ON);
        lsMovies.setTransferHandler(new Actors.ImportMovieTransferHandler());
    }

    private void showActor() {
        clearForm();
        int selectedRow = tbActors.getSelectedRow();		
        int rowIndex = tbActors.convertRowIndexToModel(selectedRow);
        int selectedDirectorId = (int) actorsTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Actor> optActor = actorRepository.SelectActor(selectedDirectorId);
            if (optActor.isPresent()) {
                selectedActor = optActor.get();
                fillForm(selectedActor);
            }
        } catch (Exception ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show actor!");
        }
    }

    private void clearForm() {
       
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        
        lbIcon.setIcon(null);
        selectedActor = null;
        
        moviesSet.clear();
        
        moviesModel.clear();

    }

    private void fillForm(Actor actor) throws Exception {
        
        loadMoviesModel(actor.getId());
        
        tfFirstName.setText(actor.getFirstName());
        tfLastName.setText(actor.getLastName());
        setIcon(lbIcon, new File(actorRepository.SelectActedMovies(actor.getId()).get(0).getImagePath()));
    }

    private void loadMoviesModel(int id) throws Exception {
        List<Movie> movies = actorRepository.SelectActedMovies(id);
        movies.forEach(movie -> moviesSet.add(movie));
        moviesModel.clear();
        moviesSet.forEach(movie -> moviesModel.addElement(movie));
    }

    private void loadMoviesModel() throws Exception {
        List<Movie> movies = repository.SelectMovies();
        allMoviesModel.clear();
        movies.forEach(movie -> allMoviesModel.addElement(movie));
        lsAllMovies.setModel(allMoviesModel);

    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

        }

        return ok;
    }
    
    private class ExportMovieTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new MovieTransferable(lsAllMovies.getSelectedValue());
        }
    }
    
    private class ImportMovieTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(MovieTransferable.MOVIE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Movie add = (Movie) transferable.getTransferData(MovieTransferable.MOVIE_FLAVOR);
                if(moviesSet.add(add)){
                    moviesModel.addElement(add);
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
}
