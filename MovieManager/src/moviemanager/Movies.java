/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moviemanager;

import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;
import moviemanager.dal.MovieRepository;
import moviemanager.dal.DirectorRepository;
import moviemanager.dal.ActorRepository;
import moviemanager.dal.RepositoryFactory;
import moviemanager.model.Actor;
import moviemanager.model.Movie;
import moviemanager.model.Director;
import moviemanager.model.MovieTableModel;
import moviemanager.model.Person;
import moviemanager.model.PersonTransferable;
import moviemanager.utils.FileUtils;
import moviemanager.utils.IconUtils;
import moviemanager.utils.MessageUtils;

/**
 *
 * @author fran
 */
public class Movies extends javax.swing.JPanel {
    
    
    private DefaultListModel<Director> directorsModel;
    private DefaultListModel<Director> allDirectorsModel;
    private DefaultListModel<Actor> actorsModel;
    private DefaultListModel<Actor> allActorsModel;

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;
    
    private static final Random RANDOM = new Random();
    private static final String DIR = "assets";
    
    private MovieRepository repository;
    private DirectorRepository directorRepository;
    private ActorRepository actorRepository;
    
    private MovieTableModel moviesTableModel;
    

    private Movie selectedMovie;

    
    /**
     * Creates new form Movies
     */
    public Movies() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfYear = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbYearError = new javax.swing.JLabel();
        tfGenre = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        lbGenreError = new javax.swing.JLabel();
        lbImagePathError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lbPageLinkError = new javax.swing.JLabel();
        tfPageLink = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllDirectors = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        jLabel13 = new javax.swing.JLabel();
        btnCreateMovie = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        lbIcon = new javax.swing.JLabel();
        tfImagePath = new javax.swing.JTextField();
        btnChooseImage = new javax.swing.JButton();
        btnRemoveDirector = new javax.swing.JButton();
        btnRemoveActor = new javax.swing.JButton();
        lbDurationError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lbOriginalTitleError = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        tfStartDate = new javax.swing.JTextField();
        lbStarDateError = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        tfReservationLink = new javax.swing.JTextField();
        lbReservationLinkError = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        tfType = new javax.swing.JTextField();
        lbRatingError = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        tfRating = new javax.swing.JTextField();
        lbDescriptionError = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1257, 778));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jLabel1.setText("Movies");

        jLabel4.setText("Year:");

        tfYear.setName("Int"); // NOI18N

        lbTitleError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel6.setText("Genre:");

        lbYearError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel7.setText("Image path:");

        lbGenreError.setForeground(new java.awt.Color(204, 0, 0));

        lbImagePathError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel8.setText("Page link:");

        lbPageLinkError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel2.setText("Title:");

        jLabel10.setText("Directors");

        lsDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsDirectorsMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lsDirectors);

        jScrollPane6.setViewportView(lsAllDirectors);

        jLabel11.setText("All Directors");

        lsActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsActorsMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(lsActors);

        jLabel12.setText("Actors");

        jScrollPane8.setViewportView(lsAllActors);

        jLabel13.setText("All Actors");

        btnCreateMovie.setText("Create movie");
        btnCreateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMovieActionPerformed(evt);
            }
        });

        btnUpdateMovie.setText("Update movie");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setText("Delete Movie");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        lbIcon.setBackground(new java.awt.Color(51, 255, 51));

        tfImagePath.setEditable(false);

        btnChooseImage.setText("Choose image");
        btnChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageActionPerformed(evt);
            }
        });

        btnRemoveDirector.setText("Remove Director");
        btnRemoveDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorActionPerformed(evt);
            }
        });

        btnRemoveActor.setText("Remove Actor");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        lbDurationError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel3.setText("Duration(min):");

        tfDuration.setName("Int"); // NOI18N

        lbOriginalTitleError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel9.setText("Original title:");

        jLabel14.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane2.setViewportView(taDescription);

        jLabel15.setText("Start date:");

        tfStartDate.setName("Date"); // NOI18N

        lbStarDateError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel16.setText("Reservation link:");

        lbReservationLinkError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel17.setText("Published date:");

        tfPublishedDate.setEditable(false);
        tfPublishedDate.setName("DateTime"); // NOI18N

        jLabel18.setText("Type:");

        lbRatingError.setForeground(new java.awt.Color(204, 0, 0));

        jLabel19.setText("Rating:");

        tfRating.setName("Rating"); // NOI18N

        lbDescriptionError.setForeground(new java.awt.Color(204, 0, 0));

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.setMaximumSize(new java.awt.Dimension(2147483647, 150));
        tbMovies.setMinimumSize(new java.awt.Dimension(60, 150));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1496, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(54, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel2)
                                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel6))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(jLabel9)
                                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel3)
                                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel4)
                                                    .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(301, 301, 301)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lbYearError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addComponent(jLabel15)
                                            .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(301, 301, 301)
                                                .addComponent(lbStarDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(36, 36, 36)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(tfReservationLink, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel16))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbReservationLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnChooseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(tfPageLink, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jLabel8))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lbPageLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lbImagePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel19)
                                                    .addComponent(tfRating, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel18)
                                                    .addComponent(tfType, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lbRatingError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel17)
                                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel14)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(btnCreateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(31, 31, 31)
                                                    .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel12))
                                                    .addGap(18, 18, 18)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel13)
                                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                                .addGap(34, 34, 34)))
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(lbIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel12)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(22, 22, 22)
                                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(21, 21, 21)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel19)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(21, 21, 21)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lbRatingError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(tfRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(jLabel18)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(tfType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel4)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(tfYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(lbYearError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(btnChooseImage))
                                                    .addComponent(lbImagePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(15, 15, 15)
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lbPageLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tfPageLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel16)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lbReservationLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(tfReservationLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel15)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lbStarDateError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(6, 6, 6)
                        .addComponent(jLabel14)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdateMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreateMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCreateMovie, btnDeleteMovie, btnUpdateMovie});

    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnRemoveDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorActionPerformed
        directorsModel.remove(lsDirectors.getSelectedIndex());
        btnRemoveDirector.setEnabled(false);
    }//GEN-LAST:event_btnRemoveDirectorActionPerformed

    private void lsDirectorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsDirectorsMouseClicked
        if (lsDirectors.getModel().getSize() != 0) {
            btnRemoveDirector.setEnabled(true);
        }

    }//GEN-LAST:event_lsDirectorsMouseClicked

    private void lsActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsActorsMouseClicked
        if (lsActors.getModel().getSize() != 0) {
            btnRemoveActor.setEnabled(true);
        }

    }//GEN-LAST:event_lsActorsMouseClicked

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed
        actorsModel.remove(lsActors.getSelectedIndex());
        btnRemoveActor.setEnabled(false);
    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageActionPerformed
        File file = FileUtils.uploadFile("Images", new File("assets"), "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfImagePath.setText(file.getAbsolutePath());
        setIcon(lbIcon, file);
    }//GEN-LAST:event_btnChooseImageActionPerformed

    private void btnCreateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMovieActionPerformed
        if (formValid()) {
            try {
                String localPicturePath = uploadImage();
                LocalDateTime now = LocalDateTime.now();

                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        ZonedDateTime.parse(now.atZone(ZoneId.of("GMT")).format(DateTimeFormatter.RFC_1123_DATE_TIME), Movie.DATE_FORMATTER),
                        taDescription.getText().trim(),
                        tfOriginalTitle.getText().trim(),
                        Integer.parseInt(tfDuration.getText().trim()),
                        Integer.parseInt(tfYear.getText().trim()),
                        tfGenre.getText().trim(),
                        localPicturePath,
                        Integer.parseInt(tfRating.getText().trim()),
                        tfType.getText().trim(),
                        tfPageLink.getText().trim(),
                        tfReservationLink.getText().trim(),
                        Movie.DATE_FORMAT.parse(tfStartDate.getText().trim())
                );
                handleDirectorsAndActors(movie);
                int movieId = repository.CreateMovie(movie);

                moviesTableModel.setMovies(repository.SelectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create movie!");
            }
        }
    }//GEN-LAST:event_btnCreateMovieActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
            return;
        }
        if (formValid()) {
            try {
                if (selectedMovie.getImagePath() == null || 
                        !tfImagePath.getText().trim().equals(selectedMovie.getImagePath())) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getImagePath()));
                    String localPicturePath = uploadImage();
                    selectedMovie.setImagePath(localPicturePath);
                }
                LocalDateTime now = LocalDateTime.now();

                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPublishedDate(ZonedDateTime.parse(now.atZone(ZoneId.of("GMT")).format(DateTimeFormatter.RFC_1123_DATE_TIME), Movie.DATE_FORMATTER));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
                selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
                selectedMovie.setYear(Integer.parseInt(tfYear.getText().trim()));
                selectedMovie.setRating(Integer.parseInt(tfRating.getText().trim()));
                selectedMovie.setType(tfType.getText().trim());
                selectedMovie.setLink(tfPageLink.getText().trim());
                selectedMovie.setReservationLink(tfReservationLink.getText().trim());
                selectedMovie.setStartDate(Movie.DATE_FORMAT.parse(tfStartDate.getText().trim()));
                repository.DeleteDirectorsFromMovie(selectedMovie.getId());
                repository.DeleteActorsFromMovie(selectedMovie.getId());
                
                handleDirectorsAndActors(selectedMovie.getId());
                repository.UpdateMovie(selectedMovie.getId(), selectedMovie);
                moviesTableModel.setMovies(repository.SelectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie!");
            }
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                Files.deleteIfExists(Paths.get(selectedMovie.getImagePath()));
                repository.DeleteDirectorsFromMovie(selectedMovie.getId());
                repository.DeleteActorsFromMovie(selectedMovie.getId());
                repository.DeleteMovie(selectedMovie.getId());
                moviesTableModel.setMovies(repository.SelectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseImage;
    private javax.swing.JButton btnCreateMovie;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirector;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbIcon;
    private javax.swing.JLabel lbImagePathError;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPageLinkError;
    private javax.swing.JLabel lbRatingError;
    private javax.swing.JLabel lbReservationLinkError;
    private javax.swing.JLabel lbStarDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JLabel lbYearError;
    private javax.swing.JList<Actor> lsActors;
    private javax.swing.JList<Actor> lsAllActors;
    private javax.swing.JList<Director> lsAllDirectors;
    private javax.swing.JList<Director> lsDirectors;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfImagePath;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPageLink;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfRating;
    private javax.swing.JTextField tfReservationLink;
    private javax.swing.JTextField tfStartDate;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfType;
    private javax.swing.JTextField tfYear;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            initDragNDrop();
            
            allDirectorsModel = new DefaultListModel();
            allActorsModel = new DefaultListModel();
            directorsModel = new DefaultListModel();
            actorsModel = new DefaultListModel();

            loadActorsModel();
            loadDirectorsModel();
            
            btnRemoveDirector.setEnabled(false);
            btnRemoveActor.setEnabled(false);
            
            lsDirectors.setModel(directorsModel);
            lsActors.setModel(actorsModel);
            
            taDescription.setLineWrap(true);
            taDescription.setWrapStyleWord(true);

            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfDuration, tfYear, tfGenre, tfImagePath, tfPageLink, tfOriginalTitle, tfRating, tfReservationLink, taDescription, tfStartDate);
        errorLabels = Arrays.asList(lbTitleError, lbDurationError, lbYearError,  lbGenreError, lbImagePathError, lbPageLinkError, lbOriginalTitleError, lbRatingError, lbReservationLinkError, lbDescriptionError, lbStarDateError);

    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.GetMovieRepository();
        directorRepository = RepositoryFactory.GetDirectorRepository();
        actorRepository = RepositoryFactory.GetActorRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        moviesTableModel = new MovieTableModel(repository.SelectMovies());
        tbMovies.setModel(moviesTableModel);
    }

    private void showMovie() {
        clearForm();
        int selectedRow = tbMovies.getSelectedRow();		
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) moviesTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = repository.SelectMovie(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        tfPublishedDate.setText("");
        tfType.setText("");
        selectedMovie = null;
        lbIcon.setIcon(null);

        directorsModel.clear();
        actorsModel.clear();
        
    }

    private void fillForm(Movie movie) throws Exception {
        if (movie.getImagePath() != null && Files.exists(Paths.get(movie.getImagePath()))) {
            tfImagePath.setText(movie.getImagePath());
            setIcon(lbIcon, new File(movie.getImagePath()));
        } else {
            tfImagePath.setText("");
            lbIcon.setIcon(null);
        }
        tfTitle.setText(movie.getTitle());
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        taDescription.setText(movie.getDescription());
        tfOriginalTitle.setText(movie.getOriginalTitle());
        tfDuration.setText(String.valueOf(movie.getDuration()));
        tfYear.setText(String.valueOf(movie.getYear()));
        tfGenre.setText(movie.getGenre());
        tfImagePath.setText(movie.getImagePath());
        tfRating.setText(String.valueOf(movie.getRating()));
        tfType.setText(movie.getType());
        tfPageLink.setText(movie.getLink());
        tfReservationLink.setText(movie.getReservationLink());
        tfStartDate.setText(Movie.DATE_FORMAT.format(movie.getStartDate()));
        loadDirectorsModel(movie.getId());
        loadActorsModel(movie.getId());
        
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }
    
    private void loadDirectorsModel(int movieId) throws Exception {
        List<Director> directors = repository.SelectMovieDirectors(movieId);
        directorsModel.clear();
        directors.forEach(director -> directorsModel.addElement(director));
    }    

    private void loadDirectorsModel() throws Exception {
        List<Director> directors = directorRepository.SelectDirectors();
        allDirectorsModel.clear();
        directors.forEach(director -> allDirectorsModel.addElement(director));
        lsAllDirectors.setModel(allDirectorsModel);
    }
   
    private void loadActorsModel(int movieId) throws Exception {
        List<Actor> actors = repository.SelectMovieActors(movieId);
        actorsModel.clear();
        actors.forEach(actor -> actorsModel.addElement(actor));
    }    

    private void loadActorsModel() throws Exception {
        List<Actor> actors = actorRepository.SelectActors();
        allActorsModel.clear();
        actors.forEach(actor -> allActorsModel.addElement(actor));
        lsAllActors.setModel(allActorsModel);
    }

    private void initDragNDrop() {
        lsAllDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllDirectors.setDragEnabled(true);
        lsAllDirectors.setTransferHandler(new ExportDirectorTransferHandler());
      
        lsDirectors.setDropMode(DropMode.ON);
        lsDirectors.setTransferHandler(new ImportDirectorTransferHandler());
       
        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setTransferHandler(new ExportActorTransferHandler());
      
        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ImportActorTransferHandler());
    }

    private String uploadImage() throws IOException {
        String imagePath = tfImagePath.getText().trim();
        String ext = imagePath.substring(imagePath.lastIndexOf("."));
        String pictureName = Math.abs(RANDOM.nextInt()) + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(imagePath, localPicturePath);
        return localPicturePath;
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
            
            if ("Int".equals(validationFields.get(i).getName())) {
                try {
                    Integer.parseInt(validationFields.get(i).getText().trim());
                    errorLabels.get(i).setText("");
                } catch (NumberFormatException e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
            if ("Rating".equals(validationFields.get(i).getName())) {
                try {
                    int n  = Integer.parseInt(validationFields.get(i).getText().trim());
                    if (n == 0 || n == 12 || n == 15 || n == 18) {
                        errorLabels.get(i).setText("X");
                    } else {
                        ok = false;
                        errorLabels.get(i).setText("X");
                    }         
                } catch (NumberFormatException e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    Movie.DATE_FORMAT.parse(validationFields.get(i).getText().trim());
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
        }

        return ok;
    }

    private void handleDirectorsAndActors(int movieId) {
        for (int i = 0; i < directorsModel.getSize(); i++) {
            try {
                repository.InsertDirectorInMovie(movieId, directorsModel.get(i).getId());
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to insert directors in movie!");
            }
        }
        for (int i = 0; i < actorsModel.getSize(); i++) {
            try {
                repository.InsertActorInMovie(movieId, actorsModel.get(i).getId());
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to insert directors in movie!");
            }
        }
    }
    
    private void handleDirectorsAndActors(Movie movie) {
        StringBuilder sb = new StringBuilder();
        
        for (int i = 0; i < lsDirectors.getModel().getSize(); i++) {
            if (i == lsDirectors.getModel().getSize()- 1) {
                sb.append(lsDirectors.getModel().getElementAt(i).toString());
            } else {
            sb.append(lsDirectors.getModel().getElementAt(i).toString()).append(", ");
            }
        }
        movie.setDirectors(sb.toString());
        sb = new StringBuilder();
        for (int i = 0; i < lsActors.getModel().getSize(); i++) {
            if (i == lsActors.getModel().getSize()-1) {
                sb.append(lsActors.getModel().getElementAt(i).toString());
            } else {
            sb.append(lsActors.getModel().getElementAt(i).toString()).append(", ");
            }
        }
        movie.setActors(sb.toString());
    }
    
    private class ExportDirectorTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsAllDirectors.getSelectedValue());
        }
    }
    
    private class ImportDirectorTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person add = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if(!directorsModel.contains(add)){
                    directorsModel.addElement((Director)add);
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
    
    private class ExportActorTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsAllActors.getSelectedValue());
        }
    }
    
    private class ImportActorTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person add = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if(!actorsModel.contains(add)){
                    actorsModel.addElement((Actor)add);
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(Movies.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
}
